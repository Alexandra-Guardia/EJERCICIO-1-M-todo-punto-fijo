#           Autor:
#   María Alexandra Guardia Canche
#   alexandra.guardia.25@gmail.com
#   Versión 1.0 : 11/02/2025

# Importar las librerías necesarias
import numpy as np  # Para operaciones numéricas
import matplotlib.pyplot as plt  # Para graficar

# Definir la función g(x) para el método de punto fijo
def g(x):
    return (-1 + 3*x)**(1/2)  # Se despeja la ecuación original para obtener la función iterativa

# Derivada de g(x) (criterio de convergencia)
def g_prime(x):
    return (3/2) * (-1 + 3*x)**(-1/2)  # Se obtiene la derivada de g(x) para verificar la convergencia

# Función para calcular el error absoluto
def error_absoluto(x_new, x_old):
    return abs(x_new - x_old)  # Diferencia absoluta entre el nuevo y el anterior valor de x

# Función para calcular el error relativo
def error_relativo(x_new, x_old):
    return abs((x_new - x_old) / x_new)  # Diferencia relativa entre el nuevo y el anterior valor de x

# Función para calcular el error cuadrático
def error_cuadratico(x_new, x_old):
    return (x_new - x_old)**2  # Se eleva al cuadrado la diferencia entre valores sucesivos

# Implementación del método de punto fijo
def punto_fijo(x0, tol=10e-5, max_iter=100):  # Se ajusta la tolerancia para mejorar la visualización de resultados
    iteraciones = []  # Lista para almacenar iteraciones
    errores_abs = []  # Lista para almacenar errores absolutos
    errores_rel = []  # Lista para almacenar errores relativos
    errores_cuad = []  # Lista para almacenar errores cuadráticos

    x_old = x0  # Se inicializa el valor inicial
    for i in range(max_iter):  # Bucle para iterar hasta el número máximo de iteraciones
        x_new = g(x_old)  # Se calcula el nuevo valor de x usando la función g(x)
        e_abs = error_absoluto(x_new, x_old)  # Se calcula el error absoluto
        e_rel = error_relativo(x_new, x_old)  # Se calcula el error relativo
        e_cuad = error_cuadratico(x_new, x_old)  # Se calcula el error cuadrático

        # Se almacenan los valores en la lista de iteraciones
        iteraciones.append((i+1, x_new, e_abs, e_rel, e_cuad))
        errores_abs.append(e_abs)
        errores_rel.append(e_rel)
        errores_cuad.append(e_cuad)

        # Se verifica si el error absoluto es menor que la tolerancia para detener la iteración
        if e_abs < tol:
            break

        x_old = x_new  # Se actualiza x_old para la siguiente iteración

    return iteraciones, errores_abs, errores_rel, errores_cuad  # Se retornan los resultados

# Parámetro inicial
x0 = 1.5  # Se cambia el valor inicial a 1.5 para mejorar la convergencia
iteraciones, errores_abs, errores_rel, errores_cuad = punto_fijo(x0)  # Se llama a la función con el valor inicial

# Imprimir tabla con los resultados de las iteraciones
print("Iteración | x_n      | Error absoluto | Error relativo | Error cuadrático")
print("-----------------------------------------------------------------------")
for it in iteraciones:
    print(f"{it[0]:9d} | {it[1]:.6f} | {it[2]:.6e} | {it[3]:.6e} | {it[4]:.6e}")

# Graficar la convergencia de la función g(x)
x_vals = np.linspace(-1, 3, 100)  # Se define el rango de x para la gráfica
y_vals = g(x_vals)  # Se evalúa g(x) en los valores de x

plt.figure(figsize=(8, 5))  # Se establece el tamaño de la figura
plt.plot(x_vals, y_vals, label=r"$g(x) = (-1 + 3x)^{1/2}$", color="blue")  # Se grafica g(x)
plt.plot(x_vals, x_vals, linestyle="dashed", color="red", label="y = x")  # Se grafica la línea y = x

# Graficar los puntos de iteración
x_points = [it[1] for it in iteraciones]  # Extraer valores de x en cada iteración
y_points = [g(x) for x in x_points]  # Evaluar g(x) en cada x obtenido
plt.scatter(x_points, y_points, color="black", zorder=3)  # Marcar los puntos en la gráfica
plt.plot(x_points, y_points, linestyle="dotted", color="black", label="Iteraciones")  # Unir los puntos con línea punteada

plt.xlabel("x")  # Etiqueta del eje x
plt.ylabel("g(x)")  # Etiqueta del eje y
plt.legend()  # Mostrar la leyenda
plt.grid(True)  # Activar la cuadrícula
plt.title("Método de Punto Fijo")  # Título de la gráfica
plt.savefig("punto_fijo_convergencia.png")  # Guardar la imagen de la gráfica
plt.show()  # Mostrar la gráfica

# Graficar la evolución de los errores
plt.figure(figsize=(8, 5))  # Establecer el tamaño de la figura
plt.plot(range(1, len(errores_abs) + 1), errores_abs, marker="o", label="Error absoluto")  # Graficar error absoluto
plt.plot(range(1, len(errores_rel) + 1), errores_rel, marker="s", label="Error relativo")  # Graficar error relativo
plt.plot(range(1, len(errores_cuad) + 1), errores_cuad, marker="^", label="Error cuadrático")  # Graficar error cuadrático

plt.xlabel("Iteración")  # Etiqueta del eje x
plt.ylabel("Error")  # Etiqueta del eje y
plt.yscale("log")  # Escala logarítmica en el eje y para visualizar mejor los errores pequeños
plt.legend()  # Mostrar la leyenda
plt.grid(True)  # Activar la cuadrícula
plt.title("Evolución de los Errores")  # Título de la gráfica
plt.savefig("errores_punto_fijo.png")  # Guardar la gráfica de los errores
plt.show()  # Mostrar la gráfica
